{"version":3,"sources":["d3-line-chart.js"],"names":[],"mappings":"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","file":"d3-line-chart.js","sourcesContent":["(function(d3, undefined){\r\n    //helpers\r\n    function applyTicks(_axis, ticks){ //helper for applying ticks to axis or grid\r\n        if(typeof(ticks) ===  'number'){\r\n            _axis.ticks(ticks);\r\n        }else if(typeof(ticks) === 'object'){\r\n            var option;\r\n            for(option in ticks){\r\n                if(ticks.hasOwnProperty(option) && typeof(_axis[option]) === 'function'){\r\n                    _axis[option](ticks[option]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function translateDomain(obj){\r\n        if(typeof(obj.start) !== 'undefined' && typeof(obj.end) !== 'undefined'){\r\n            return [obj.start, obj.end];\r\n        }\r\n        throw Error('Bad domain configuration!');\r\n    }\r\n\r\n    /* TODO:\r\n     * - configurable svg (line & axis colors and widths etc) ?\r\n     * - refactor everything :D\r\n     * - save method\r\n     * - responsiveness\r\n     */\r\n    Polymer({\r\n\r\n        is: 'd3-line-chart',\r\n\r\n        properties: {\r\n            /**\r\n             * Array containing axes configuration. Each axis configuration is an object as described below:\r\n             * ```\r\n             * [{\r\n           *    name: String (required)\r\n           *    label: String\r\n           *    scale: String or Object - scale of axis, defaults to scale attribute value\r\n           *    domain: Object {start, end} - domain of axis (if not specified covers all data)\r\n           *    interpolation: String - mode of line interpolation for axis, defaults to interpolation attribute value\r\n           *    ticks: Number or Object\r\n           *      Number - approximate number of ticks to display\r\n           *      Object - ticks configuration, each property will be argument of call to axis method with the same name\r\n           * }, ...]\r\n             * ```\r\n             * See D3.js documentation for [available axis methods](https://github.com/mbostock/d3/wiki/SVG-Axes#ticks)\r\n             *\r\n             * Note that x axis configuration should be first object in array and chart can display at most 3 axes [x, y1, y2].\r\n             *\r\n             * @attribute axes\r\n             * @type Array\r\n             * @default [{ name: 'xAxis' }, { name: 'yAxis' }]\r\n             */\r\n            axes: {\r\n                type: Array,\r\n                observer: '_refresh',\r\n                value: function(){\r\n                    return [{ name: 'xAxis' }, { name: 'yAxis' }];\r\n                }\r\n            },\r\n            /**\r\n             * Array containing series configuration. Each series configuration is an object as described below:\r\n             * ```\r\n             * [{\r\n           *    label: String (recommended if `legend` attribute set)\r\n           *    axis: String - name of axis the series belongs to, if not set defaults to 'yAxis'\r\n           *    interpolation: String - mode of line interpolation for series, defaults to axis.interpolation\r\n           *    grid: boolean - enable or disable grid lines for axis, defaults to grid attribute value\r\n           *    nice: boolean - enable or disable domain smoothing for axis, defaults to nice attribute value\r\n           *    x: String or function()\r\n           *      String - sets x getter to function(record){ return record[x]; }\r\n           *      function(record) - function getting x from record\r\n           *    y: String or function(record)\r\n           *      String - sets x getter function(record){ return record[y]; }\r\n           *      function(record) - function getting y from record (required if `data` contains objects)\r\n           * }, ...]\r\n             * ```\r\n             * Note that first element of array is drawn with lowest 'z-index'\r\n             *\r\n             * @attribute metadata\r\n             * @type Array\r\n             * @default [{ axis: 'yAxis' }]\r\n             */\r\n            metadata: {\r\n                type: Array,\r\n                observer: '_refresh',\r\n                value: function(){\r\n                    return [{ axis: 'yAxis' }];\r\n                }\r\n            },\r\n            /**\r\n             * Array of records in form of:\r\n             *  - Objects (requires usage of metadata.y and recommended metadata.x)\r\n             *  - Arrays (does not require x y getters but you can still use them for derivative data display)\r\n             *\r\n             *\r\n             *  ```\r\n             *  //ready to go\r\n             *  chart.data = [[x1,y1],[x2,y2], ...];\r\n             *  //requires getter for y in metadata, possible getter for x (eg. date)\r\n             *  chart.data = [{ date: Date1, income: 5000 },{ date: Date2, income: 1500 }, ...];\r\n             *  ```\r\n             *\r\n             * @attribute data\r\n             * @type Array\r\n             * @default []\r\n             */\r\n            data: {\r\n                type: Array,\r\n                observer: '_checkAndRedraw',\r\n                value: function(){\r\n                    return [];\r\n                }\r\n            },\r\n            /**\r\n             * Default line interpolation mode\r\n             * #### Possible values:\r\n             *  - `linear` - piecewise linear segments, as in a polyline.\r\n             *  - `linear-closed` - close the linear segments to form a polygon.\r\n             *  - `step` - alternate between horizontal and vertical segments, as in a step function.\r\n             *  - `step-before` - alternate between vertical and horizontal segments, as in a step function.\r\n             *  - `step-after` - alternate between horizontal and vertical segments, as in a step function.\r\n             *  - `basis` - a B-spline, with control point duplication on the ends.\r\n             *  - `basis-open` - an open B-spline; may not intersect the start or end.\r\n             *  - `basis-closed` - a closed B-spline, as in a loop.\r\n             *  - `bundle` - equivalent to basis, except the tension parameter is used to straighten the spline.\r\n             *  - `cardinal` - a Cardinal spline, with control point duplication on the ends.\r\n             *  - `cardinal-open` - an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\r\n             *  - `cardinal-closed` - a closed Cardinal spline, as in a loop.\r\n             *  - `monotone` - cubic interpolation that preserves monotonicity in y.\r\n             *\r\n             * @attribute interpolation\r\n             * @type String\r\n             * @default 'linear'\r\n             */\r\n            interpolation: {\r\n                type: String,\r\n                value: 'linear',\r\n                observer: '_refresh'\r\n            },\r\n            /**\r\n             * Object specifying X domain of the chart. If not defined domain covers all data\r\n             * #### Properties:\r\n             * - start\r\n             * - end\r\n             *\r\n             * @attribute domain\r\n             * @type Object\r\n             * @default null\r\n             */\r\n            domain: {\r\n                type: Object,\r\n                value: null,\r\n                observer: 'redraw'\r\n            },\r\n            /**\r\n             * Default scale mode for axes\r\n             * #### Possible values:\r\n             *  - `linear` - construct a linear quantitative scale\r\n             *  - `time` - construct a linear time scale\r\n             *  - `pow` - construct a quantitative scale with an exponential transform, setting exponent recommended\r\n             *  - `sqrt` - construct a quantitative scale with a square root transform\r\n             *  - `log` - construct a quantitative scale with an logarithmic transform, requires non 0 x values\r\n             *  - `quantile` - construct a quantitative scale mapping to quantiles, requires setting domain and range\r\n             *  - `quantize` - construct a linear quantitative scale with a discrete output range\r\n             *  - `threshold` - construct a threshold scale with a discrete output range\r\n             *  - `ordinal` - construct an ordinal scale\r\n             *\r\n             *\r\n             *  If you want to add additional settings to your scale turn it to object with property `type` containing selected scale mode.\r\n             *  ```\r\n             *  //scale without extra configuration\r\n             *  scale = 'sqrt';\r\n             *  //scale with configuration\r\n             *  scale = { type: 'pow', exponent: 2 };\r\n             *  ```\r\n             *\r\n             *  See D3.js documentation for [available scale settings](https://github.com/mbostock/d3/wiki/API-Reference#d3scale-scales)\r\n             *\r\n             * @attribute scale\r\n             * @type String or Object\r\n             * @default 'linear'\r\n             */\r\n            scale: {\r\n                type: String,\r\n                value: 'linear',\r\n                observer: '_refresh'\r\n            },\r\n            /**\r\n             * The `nice` attribute if set enables broadening axes domain which is applied for better display of data close to range extremes.\r\n             * Can be overwritten in specific axis.\r\n             *\r\n             * @attribute nice\r\n             * @type boolean\r\n             * @default false\r\n             */\r\n            nice: {\r\n                type: Boolean,\r\n                value: false,\r\n                reflectToAttribute: true,\r\n                observer: 'redraw'\r\n            },\r\n            /**\r\n             * The `grid` attribute if set enables grid display on axes that didn't defined own setting.\r\n             *\r\n             * @attribute grid\r\n             * @type boolean\r\n             * @default false\r\n             */\r\n            grid: {\r\n                type: Boolean,\r\n                value: false,\r\n                reflectToAttribute: true,\r\n                observer: '_refresh'\r\n            },\r\n            ///**\r\n            // * The `legend` attribute if set enables legend display.\r\n            // *\r\n            // * @attribute legend\r\n            // * @type boolean\r\n            // * @default false\r\n            // */\r\n            //legend: {\r\n            //    value: false,\r\n            //    reflectToAttribute: true\r\n            //},\r\n            ///**\r\n            // * The `vertical` attribute if set enables placing legend on the bottom of chart.\r\n            // *\r\n            // * @attribute vertical\r\n            // * @type boolean\r\n            // * @default false\r\n            // */\r\n            //vertical: {\r\n            //    type: Boolean,\r\n            //    value: false,\r\n            //    reflectToAttribute: true\r\n            //},\r\n            /**\r\n             * Object with settings for default svg margins override\r\n             * #### Properties:\r\n             *  - `top` - default 10\r\n             *  - `right` - default 20 (or 60 if there are 3 axes)\r\n             *  - `bottom` - default 60\r\n             *  - `left` - default 60\r\n             *\r\n             * @attribute margin\r\n             * @type Object\r\n             * @default null\r\n             */\r\n            margin: {\r\n                type: Object,\r\n                value: null,\r\n                observer: '_refresh'\r\n            },\r\n            /**\r\n             * The `factory` attribute if set disables display of chart which simplifies using it as svg factory.\r\n             *\r\n             * @attribute factory\r\n             * @type boolean\r\n             * @default false\r\n             */\r\n            factory: {\r\n                type: Boolean,\r\n                value: false,\r\n                reflectToAttribute: true\r\n            }\r\n        },\r\n\r\n        //lifecycle\r\n        attached: function(){\r\n            var me = this;\r\n            me.uid = me.newUID(); //required because of svg clip paths overlapping\r\n            me.colors = me.colors || ['#ff0000', '#ff9900', '#ccff00', '#33ff00', '#00ff66', '#00ffff', '#0066ff', '#3300ff', '#cc00ff', '#ff0099'];\r\n            this.async(function(){\r\n                this.prepare();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * The `prepare([width, height, target])` method recreates chart with updated configuration attributes & size.\r\n         * You can also use it to create svg node of desired width/height & current configuration by passing width and height.\r\n         * If you add target parameter created svg will be appended to target node or chart will be written to it (if it is SVG node).\r\n         * You can also pass target node as a css selector.\r\n         *\r\n         * @method prepare\r\n         * @param {int} [width]\r\n         * @param {int} [height]\r\n         * @param {String} [target]\r\n         * @return {boolean} Returns true if succeeded, otherwise false.\r\n         */\r\n        prepare: function(width, height, target){\r\n            var me = this,\r\n                xAxis = me.axes[0],\r\n                yAxis = me.axes[1],\r\n                y1Axis = me.axes[2],\r\n                bounds = me.getBoundingClientRect(),\r\n                external = (width && height),\r\n                uid = (external) ? me.newUID() : me.uid,\r\n                dataPresent = me.data && me.data.length,\r\n                svg;\r\n\r\n            //select target svg\r\n            if(external){\r\n                if(target){\r\n                    svg = (target.nodeName === 'SVG') ? d3.select(target) : d3.select(target).append('svg');\r\n                }else{\r\n                    svg = d3.select(document.createElement('svg'));\r\n                }\r\n            }else{\r\n                svg = d3.select(me.$.paper);\r\n            }\r\n\r\n            //clear svg and ensure namespace\r\n            svg.attr('version', '1.1').attr('xmlns', 'http://www.w3.org/2000/svg');\r\n            svg.selectAll('*').remove();\r\n\r\n            //if no config present abandon preparation\r\n            if((!me.axes  || me.axes.length < 2) || !me.metadata){\r\n                return false;\r\n            }\r\n\r\n            //margin secure\r\n            var margin = me.margin || {};\r\n            margin.top = (isNaN(margin.top)) ? 20 : +margin.top;\r\n            margin.right = (!isNaN(margin.right)) ? +margin.right : (me.axes.length < 3) ? 20 : 60;\r\n            margin.bottom = (isNaN(margin.bottom)) ? 60 : +margin.bottom;\r\n            margin.left = (isNaN(margin.left)) ? 60 : +margin.left;\r\n\r\n            //update svg size to match component and find size of draw area\r\n            if((!me.initialized || me.sizeChanged) && !external){\r\n                if(!bounds.width || !bounds.height){ //if element is not visible abandon preparation\r\n                    return false;\r\n                }\r\n                width = bounds.width - margin.left - margin.right;\r\n                height = bounds.height - margin.top - margin.bottom;\r\n                svg.attr('width', bounds.width);\r\n                svg.attr('height', bounds.height);\r\n                me.initialized = true;\r\n                me.sizeChanged = false;\r\n            }else{\r\n                if(width && height){\r\n                    svg.attr('width', width);\r\n                    svg.attr('height', height);\r\n                    width = width - margin.left - margin.right;\r\n                    height = height - margin.top - margin.bottom;\r\n                }else{\r\n                    width = svg.attr('width') - margin.left - margin.right;\r\n                    height = svg.attr('height') - margin.top - margin.bottom;\r\n                }\r\n            }\r\n\r\n            //define scale for x axis and y axes and apply configuration\r\n            var _scale, scale, scaleType;\r\n            me.axes.forEach(function(axis, i){\r\n                if(axis.scale){\r\n                    scale = (typeof(axis.scale) === 'string') ? { type: axis.scale } : axis.scale;\r\n                }else{\r\n                    scale = (typeof(me.scale) === 'string') ? { type: me.scale } : me.scale;\r\n                }\r\n                scaleType = (scale) ? scale.type : 'linear';\r\n                scaleType = (scaleType === 'time' || typeof(d3.scale[scaleType]) === 'function') ? scaleType : 'linear';\r\n                _scale = axis._scale = ((scaleType === 'time') ? d3.time.scale() : d3.scale[scaleType]()).range((i > 0) ? [height, 0] : [0, width]);\r\n                var option;\r\n                for(option in scale){\r\n                    if(option !== 'type' && scale.hasOwnProperty(option) && typeof(_scale[option]) === 'function'){\r\n                        _scale[option](scale[option]);\r\n                    }\r\n                }\r\n            });\r\n\r\n            //create focus objects configurations\r\n            var lines = [], line;\r\n            if(dataPresent){\r\n                me.metadata.forEach(function(dataset){\r\n                    dataset.axis = dataset.axis || 'yAxis';\r\n                    var getterX, getterY, axis = me.axes.filter(function(axis){\r\n                        return axis.name === dataset.axis;\r\n                    })[0];\r\n\r\n                    if(axis){\r\n                        line = d3.svg.line();\r\n                        line.interpolate(dataset.interpolation || axis.interpolation || me.interpolation || 'linear');\r\n                        getterX = me.getXgetter(dataset);\r\n                        line.x(function(d){\r\n                            return xAxis._scale(getterX(d));\r\n                        });\r\n                        getterY = me.getYgetter(dataset);\r\n                        line.y(function(d){\r\n                            return axis._scale(getterY(d));\r\n                        });\r\n                        line.defined(function(d) {\r\n                            return !isNaN(getterY(d)) && !isNaN(getterX(d));\r\n                        });\r\n                        lines.push(line);\r\n                    }\r\n                });\r\n            }\r\n\r\n            //settle axes orientation and ticks\r\n            var axisOrientation, orientations = ['bottom', 'left', 'right'];\r\n            me.axes.forEach(function(axis, key){\r\n                axisOrientation = orientations[key];\r\n                axis._axis = d3.svg.axis().scale(axis._scale).orient(axisOrientation);\r\n                applyTicks(axis._axis, axis.ticks);\r\n                if(axis.grid || (axis.grid === undefined && me.grid)){\r\n                    axis._grid = d3.svg.axis().scale(axis._scale).orient(axisOrientation).tickFormat('');\r\n                    applyTicks(axis._grid, axis.ticks);\r\n                }else{\r\n                    axis._grid = undefined;\r\n                }\r\n            });\r\n\r\n            //create svg groups\r\n            var chart = svg.append('g').attr('class', 'display').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'),\r\n                grid = chart.append('g').attr('class', 'grid').attr('opacity', '0.7'),\r\n                focus = chart.append('g').attr('class', 'focus').attr('clip-path', 'url(#cp' + uid + ')'),\r\n                axes = chart.append('g').attr('class', 'axes'),\r\n                labels = svg.append('g').attr('class', 'labels');\r\n\r\n            //append grids to svg\r\n            if(xAxis._grid){\r\n                grid.append('g').attr('class', 'x grid ' + xAxis.name).attr('transform', 'translate(0,' + height + ')').call(xAxis._grid.tickSize(-height, 0, 0));\r\n            }\r\n            if(yAxis._grid){\r\n                grid.append('g').attr('class', 'y grid ' + yAxis.name).call(yAxis._grid.tickSize(-width, 0, 0));\r\n            }\r\n            if(y1Axis && y1Axis._grid){\r\n                grid.append('g').attr('class', 'y grid ' + y1Axis.name).attr('transform', 'translate(' + width + ' ,0)').call(y1Axis._grid.tickSize(-width, 0, 0));\r\n            }\r\n\r\n            //append axes to svg\r\n            axes.append('g').attr('class', 'x axis ' + xAxis.name).attr('transform', 'translate(0,' + height + ')').call(xAxis._axis);\r\n            axes.append('g').attr('class', 'y axis ' + yAxis.name).call(yAxis._axis);\r\n            if(y1Axis){\r\n                axes.append('g').attr('class', 'y axis ' + y1Axis.name).attr('transform', 'translate(' + width + ' ,0)').call(y1Axis._axis);\r\n            }\r\n\r\n            //append labels to svg\r\n            if(xAxis.label){\r\n                labels.append('text').attr('y', margin.top + height + margin.bottom).attr('x', margin.left + width/2).attr('dy', '-1em').style('text-anchor', 'middle').text(xAxis.label);\r\n            }\r\n            if(yAxis.label){\r\n                labels.append('text').attr('transform', 'rotate(90)').attr('y', 0).attr('x', margin.top + height/2).attr('dy', '-1em').style('text-anchor', 'middle').text(yAxis.label);\r\n            }\r\n            if(y1Axis && y1Axis.label){\r\n                labels.append('text').attr('transform', 'rotate(-90)').attr('y', width + margin.right + margin.left).attr('x', margin.top - height/2).attr('dy', '-1em').style('text-anchor', 'middle').text(y1Axis.label);\r\n            }\r\n\r\n            //append lines to svg\r\n            lines.forEach(function(line, i){\r\n                focus.append('path').attr('class', 'line l' + i);\r\n            });\r\n\r\n            //append clipping path to svg\r\n            svg.append('defs').append('clipPath')\r\n                .attr('id', 'cp' + uid)\r\n                .append('rect')\r\n                .attr('width', width)\r\n                //height & translate manipulation for proper display\r\n                .attr('height', height + 2)\r\n                .attr('transform', 'translate(0 ,-2)');\r\n\r\n            //create redraw function\r\n            var redraw = function(){\r\n                var domain, epsilon, nice;\r\n\r\n                //setting domains\r\n                me.axes.forEach(function(axis, key){\r\n                    nice = axis.nice || (axis.nice === undefined && me.nice);\r\n                    if(key > 0){\r\n                        if(axis.domain){ //if axis has predefined domain\r\n                            axis._scale.domain(translateDomain(axis.domain));\r\n                        }else{\r\n                            //set y domain for all data in axis\r\n                            domain = (dataPresent) ? d3.extent(me.getYs(axis.name)) : [0, 1];\r\n                            if(nice){\r\n                                epsilon = (domain[1] - domain[0]) * 0.02;\r\n                                domain = [domain[0] - epsilon, domain[1] + epsilon];\r\n                            }\r\n                            axis._scale.domain(domain);\r\n                            if(nice && typeof(axis._scale.nice) === 'function'){\r\n                                axis._scale.nice();\r\n                            }\r\n                        }\r\n                    }else{\r\n                        //set predefined x domain or cover all x\r\n                        domain = me.domain && translateDomain(me.domain) || axis.domain && translateDomain(axis.domain);\r\n                        domain = (domain) ? domain : (dataPresent) ? d3.extent(me.getXs()) : [0, 1];\r\n                        axis._scale.domain(domain);\r\n                    }\r\n                });\r\n\r\n                //update grids\r\n                me.axes.forEach(function(axis){\r\n                    if(axis._grid){\r\n                        grid.select('.grid.' + axis.name).transition().call(axis._grid);\r\n                    }\r\n                });\r\n\r\n                //update axes\r\n                me.axes.forEach(function(axis){\r\n                    axes.select('.axis.' + axis.name).transition().call(axis._axis);\r\n                });\r\n\r\n                //update lines\r\n                lines.forEach(function(line, i){\r\n                    focus.select('.line.l' + i).datum(me.data).transition().attr('d', line);\r\n                });\r\n\r\n                //update display properties ticks for axes and grid\r\n                svg.selectAll('.axis path, .axis line').attr('fill', 'none').attr('stroke', '#818181').attr('stroke-width', '1px').attr('shape-rendering', 'crispEdges');\r\n                svg.selectAll('.grid .tick').attr('stroke', 'lightgrey').attr('stroke-width', '1px').attr('shape-rendering', 'crispEdges');\r\n                svg.selectAll('.grid path').attr('visibility', 'hidden');\r\n            };\r\n\r\n            //do first redraw\r\n            redraw();\r\n\r\n            //if not external svg update redraw\r\n            if(!external){\r\n                me.redraw = redraw;\r\n            }else{ //if external apply styles as attributes\r\n                if(!me.factory){\r\n                    me.prepare();\r\n                }\r\n            }\r\n\r\n            //setup display properties\r\n            svg.select('.focus').attr('fill', 'none').attr('stroke-width', '1px').attr('shape-rendering', 'geometricPrecision');\r\n            svg.selectAll('.line').attr('stroke', function(d, key){ return me.colors[key]; });\r\n\r\n            //set flag if prepared\r\n            if(dataPresent){\r\n                me.prepared = true;\r\n            }\r\n\r\n            //return svg\r\n            return svg.node();\r\n        },\r\n\r\n        /**\r\n         * The `redraw()` method redraws the chart with current data.\r\n         *\r\n         * @method redraw\r\n         */\r\n        redraw: function(){\r\n            //placeholder\r\n        },\r\n\r\n        //proxy for prepare\r\n        _refresh: function(){\r\n            this.prepare();\r\n        },\r\n\r\n        //checker for redraw\r\n        _checkAndRedraw: function(){\r\n            if(this.prepared){\r\n                this.redraw();\r\n            }else{\r\n                this.prepare();\r\n            }\r\n        },\r\n\r\n        //helpers\r\n        getXgetter: function(dataset){\r\n            var me = this, sample;\r\n            if(!me.data || !me.data.length){\r\n                throw Error('Can\\'t sample records, no data');\r\n            }\r\n            sample = me.data[0];\r\n            if(typeof(dataset.x) === 'function'){\r\n                return function(d){\r\n                    return dataset.x(d);\r\n                };\r\n            }else if(dataset.x){\r\n                return function(d){\r\n                    return d[dataset.x];\r\n                };\r\n            }else if(isNaN(sample[0])){\r\n                return function(d){\r\n                    return me.data.indexOf(d) + 1;\r\n                };\r\n            }else{\r\n                return function(d){\r\n                    return d[0];\r\n                };\r\n            }\r\n        },\r\n\r\n        getYgetter: function(dataset){\r\n            var me = this, sample;\r\n            if(!me.data || !me.data.length){\r\n                throw Error('Can\\'t sample records, no data');\r\n            }\r\n            sample = me.data[0];\r\n            if(typeof(dataset.y) === 'function'){\r\n                return function(d){\r\n                    return dataset.y(d);\r\n                };\r\n            }else if(dataset.y){\r\n                return function(d){\r\n                    return d[dataset.y];\r\n                };\r\n            }else{\r\n                return function(d){\r\n                    return d[1];\r\n                };\r\n            }\r\n        },\r\n\r\n        newUID: function(){\r\n            return ('0000' + (Math.random()*Math.pow(36,4) << 0).toString(36)).slice(-4); // jshint ignore:line\r\n        },\r\n\r\n        /**\r\n         * The `getXs()` method returns all x values from current data.\r\n         *\r\n         * @method getXs\r\n         * @return {Array}\r\n         */\r\n        getXs: function(){\r\n            if(!this.data || !this.data.length){\r\n                return [];\r\n            }\r\n            var me = this, getter;\r\n            return d3.merge(me.metadata.map(function(dataset){\r\n                getter = me.getXgetter(dataset);\r\n                return me.data.map(getter);\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * The `getYs(axisName)` method returns all y values from selected axis.\r\n         *\r\n         * @method getYs\r\n         * @param {String} axisName\r\n         * @return {Array}\r\n         */\r\n        getYs: function(axisName){\r\n            if(!this.data || !this.data.length){\r\n                return [];\r\n            }\r\n            axisName = axisName || this.axes[1].name;\r\n            var me = this, getter,\r\n                datasets = me.metadata.filter(function(dataset){\r\n                    return dataset.axis === axisName;\r\n                });\r\n            return d3.merge(datasets.map(function(dataset){\r\n                getter = me.getYgetter(dataset);\r\n                return me.data.map(getter);\r\n            }));\r\n        }\r\n    });\r\n})(window.d3);"],"sourceRoot":"/source/"}